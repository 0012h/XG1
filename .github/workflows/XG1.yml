#
# https://github.com/P3TERX/Actions-OpenWrt
#
# File: .github/workflows/openwrt-bulder.yml
# Description: Build OpenWrt using GitHub Actions
#
# Copyright (c) 2019-2024 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#

name: C-Life XG1 编译流程

on:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-XG1.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 初始化环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"

    - name: 缓存构建依赖
      uses: actions/cache@v4
      with:
        path: |
          /workdir/openwrt/staging_dir
          /workdir/openwrt/tmp
        key: ${{ runner.os }}-build-cache-${{ hashFiles('**/XG1.config') }}
        restore-keys: |
          ${{ runner.os }}-build-cache-

    - name: 克隆源代码
      working-directory: /
      run: |
        mkdir -p workdir
        cd workdir
        git clone ${{ env.REPO_URL }} -b ${{ env.REPO_BRANCH }} openwrt
        ln -sf /workdir/openwrt ${{ github.workspace }}/openwrt

    - name: 加载自定义源和配置
      run: |
        cd openwrt
        # 加载自定义 feeds
        if [ -f "${{ github.workspace }}/${{ env.FEEDS_CONF }}" ]; then
          mv "${{ github.workspace }}/${{ env.FEEDS_CONF }}" feeds.conf.default
        fi
        bash "${{ github.workspace }}/${{ env.DIY_P1_SH }}"
        
        # 更新并安装 feeds
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        
        # 加载自定义配置
        if [ -d "${{ github.workspace }}/files" ]; then
          mv "${{ github.workspace }}/files" .
        fi
        if [ -f "${{ github.workspace }}/${{ env.CONFIG_FILE }}" ]; then
          mv "${{ github.workspace }}/${{ env.CONFIG_FILE }}" .config
        fi
        bash "${{ github.workspace }}/${{ env.DIY_P2_SH }}"

    - name: 缓存下载的包
      uses: actions/cache@v4
      with:
        path: /workdir/openwrt/dl
        key: ${{ runner.os }}-dl-cache-${{ hashFiles('**/XG1.config') }}

    - name: 下载软件包
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j$(nproc)
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: 编译固件
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: 检查空间使用情况
      if: (!cancelled())
      run: df -hT

    - name: 整理文件用于发布
      id: organize
      if: env.UPLOAD_RELEASE == 'true' && steps.compile.outputs.status == 'success'
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE_PATH=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 上传固件到 Release
      uses: softprops/action-gh-release@v2
      if: steps.organize.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: openwrt-${{ env.DEVICE_NAME }}-${{ env.FILE_DATE }}
        body: |
        files: ${{ env.FIRMWARE_PATH }}/*

    - name: 删除旧的工作流运行
      uses: Mattraks/delete-workflow-runs@v2
      with:
        retain_days: 1
        keep_minimum_runs: 3

    - name: 删除旧的 Release
      uses: dev-drprasad/delete-older-releases@v1
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 5
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
