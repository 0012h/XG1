#
# This is free software, lisence use MIT.
#
# Copyright (C) 2019 P3TERX <https://p3terx.com>
#
# Copyright (C) 2020 KFERMercer <KFER.Mercer@gmail.com>
#
# <https://github.com/KFERMercer/OpenWrt-CI>
#

name: Build OpenWrt

on:
  workflow_dispatch:
    inputs:
      config_file:
        description: '选择.config配置文件'
        required: true
        default: 'H3C.config'
        type: choice
        options:
          - H3C.config
          - XG1.config
      hostname:
        description: '选择主机名'
        required: true
        default: 'NX30Pro'
        type: choice
        options:
          - NX30Pro
          - XG1

env:
  SELECTED_CONFIG: ${{ github.event.inputs.config_file }}
  SELECTED_HOSTNAME: ${{ github.event.inputs.hostname }}
  OPENWRT_SOURCE_DIR: lede
  FIRMWARE_DIR: ${{ env.OPENWRT_SOURCE_DIR }}/bin/targets

jobs:
  build:
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
      - name: 检查代码 (Checkout workflow repository)
        uses: actions/checkout@v4

      - name: 初始化环境 (Initialize environment)
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E apt-get update -yqq
          sudo -E apt-get install -yqq build-essential asciidoc binutils bzip2 lib32gcc-s1 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib
          sudo -E apt-get autoremove --purge -yqq
          sudo -E apt-get clean -yqq

      - name: 克隆OpenWrt源代码 (Clone OpenWrt source)
        run: |
          git clone https://github.com/coolsnowwolf/lede ${{ env.OPENWRT_SOURCE_DIR }}

      - name: 加载自定义源 (Load custom feeds)
        working-directory: ${{ env.OPENWRT_SOURCE_DIR }}
        run: |
          # echo "src-git passwall_packages https://github.com/xiaorouji/openwrt-passwall-packages.git;main" >> feeds.conf.default
          # echo "src-git passwall https://github.com/xiaorouji/openwrt-passwall.git;main" >> feeds.conf.default

      - name: 更新软件源 (Update feeds)
        working-directory: ${{ env.OPENWRT_SOURCE_DIR }}
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: 应用选择的配置文件 (Apply selected config file)
        working-directory: ${{ env.OPENWRT_SOURCE_DIR }}
        run: |
          echo "使用配置文件: ${{ env.SELECTED_CONFIG }}"
          cp "../configs/${{ env.SELECTED_CONFIG }}" .config
          echo "已应用配置文件: ../configs/${{ env.SELECTED_CONFIG }}"

      - name: 加载配置并修改 (Load config and customize)
        working-directory: ${{ env.OPENWRT_SOURCE_DIR }}
        run: |
          sed -i 's#192.168.1.1#192.168.2.1#g' package/base-files/files/bin/config_generate
          sed -i "s#OpenWrt#${{ env.SELECTED_HOSTNAME }}#g" package/base-files/files/bin/config_generate
          sed -i "s#OpenWrt #0012h build $(TZ=UTC-8 date "+%Y.%m.%d") @ OpenWrt #g" package/lean/default-settings/files/zzz-default-settings
          sed -i 's#luci-theme-bootstrap#luci-theme-argon#g' feeds/luci/collections/luci/Makefile
          sed -i 's#exit 0#exit 0\nsed -i "s|/bin/login|/bin/login -f root|" /etc/config/ttyd#' package/lean/default-settings/files/zzz-default-settings

      - name: 下载依赖包 (Download dependencies)
        working-directory: ${{ env.OPENWRT_SOURCE_DIR }}
        run: |
          make defconfig
          make download -j$(nproc)
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: 编译固件 (Compile firmware)
        working-directory: ${{ env.OPENWRT_SOURCE_DIR }}
        run: |
          echo -e "$(nproc) thread build."
          make -j$(nproc) V=s

      - name: 清理编译目录 (Clean up packages directory)
        working-directory: ${{ env.OPENWRT_SOURCE_DIR }}
        run: |
          # 删除 packages 目录以节省空间
          rm -rf bin/packages
          echo "已删除 packages 目录"

      - name: 上传编译目录 (Upload compiled firmware directory)
        uses: actions/upload-artifact@v4
        with:
          name: OpenWrt_firmware
          path: ${{ env.FIRMWARE_DIR }}/

      - name: 生成发布标签和固件列表 (Generate release tag and firmware list)
        id: release_info
        run: |
          # 生成发布标签
          release_tag=$(date +"%Y.%m.%d-%H%M")
          echo "release_tag=$release_tag" >> $GITHUB_OUTPUT
          
          # 创建发布说明文件
          echo "OpenWrt Firmware" > release.md
          echo "" >> release.md
          echo "Build Date: $(date +"%Y-%m-%d %H:%M:%S %Z")" >> release.md
          echo "Selected Config: ${{ env.SELECTED_CONFIG }}" >> release.md
          echo "Selected Hostname: ${{ env.SELECTED_HOSTNAME }}" >> release.md
          echo "" >> release.md
          echo "## Firmware Files" >> release.md
          
          # 查找并列出所有固件文件
          find ${{ env.FIRMWARE_DIR }} -name "*.bin" -o -name "*.img" -o -name "*.gz" | while read file; do
            echo "- $(basename "$file")" >> release.md
          done

      - name: 创建发布版 (Create release)
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.release_info.outputs.release_tag }}
          name: OpenWrt Build ${{ steps.release_info.outputs.release_tag }}
          body_path: release.md
          files: |
            ${{ env.FIRMWARE_DIR }}/**/*.bin
            ${{ env.FIRMWARE_DIR }}/**/*.img
            ${{ env.FIRMWARE_DIR }}/**/*.gz

      - name: 上传到WeTransfer
        run: |
          # 安装 transfer 工具
          curl -fsSL git.io/file-transfer | sh
          
          # 上传所有固件文件
          ./transfer wet -s -p 16 --no-progress ${{ env.FIRMWARE_DIR }} 2>&1 | tee wetransfer.log
          
          # 提取并输出 URL
          wet_url=$(grep "https://we.tl/" wetransfer.log | tail -1 | awk '{print $3}')
          if [ -n "$wet_url" ]; then
            echo "::notice title=WeTransfer URL::Download URL: $wet_url"
            echo "url=$wet_url" >> $GITHUB_OUTPUT
          else
            echo "::warning::WeTransfer upload may have failed"
          fi

      - name: 删除旧工作流运行 (Delete old workflow runs)
        uses: Mattraks/delete-workflow-runs@v2.0.1
        with:
          retain_days: 1
          keep_minimum_runs: 2

      - name: 移除旧发布版 (Remove old releases)
        uses: dev-drprasad/delete-older-releases@v0.2.1
        with:
          keep_latest: 3
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
